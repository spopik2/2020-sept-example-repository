@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "CRUD - Insert";

    var thebutton = Request.Form["theButton"];
    var productname = "";
    var supplierid = "0";
    var categoryid = "0";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";
    var discontinued = "";

    //obtain the record collections (dataset) for the supplierid and the catagory id

    var db = Database.Open("NWD");
    var supplierquery = @"Select SupplierID, CompanyName
From Suppliers
Order By CompanyName";
    var caegoryquery = @"Select CategoryID, CategoryName
From Categories
Order by CategoryName";
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(caegoryquery);

    //using validation controls
    //validation controls execute both on client-side and server-side
    // see student note on moodle for validation controls
    // Validation controls (excepted Required) only kick in if data is present
    //to execute the validation controls, you will need to have a command
    //  in your code called Validation.IsValid()

    //required
    Validation.Add("ProductName",
        Validator.Required("Product Name is a required field"),
        Validator.StringLength(40, 1, "Product Name is limited to 40 characters"));

    //nullable string
    Validation.Add("QuantityPerUnit",
    Validator.StringLength(20, 0, "Product Name is limited to 20 characters"));

    //nullable money field
    // in this example UnitPrice has been validated using HTML5
    // therefore, this validation

    Validation.Add("UnitPrice",
        Validator.Decimal("Unit price must be a dollar amount"),
        Validator.Range(0.00, double.MaxValue, "Unit price must be greater or equal to zero"));

    Validation.Add("UnitsInStock",
        Validator.Decimal("Unit in stock must be a positive number"),
        Validator.Range(0, 32767, "Units in stock must be between 0 and 32767"));

    Validation.Add("UnitsOnOrder",
        Validator.Decimal("Unit on order must be a positive number"),
        Validator.Range(0, 32767, "Units on order must be between 0 and 32767"));

    Validation.Add("ReorderLevel",
        Validator.Decimal("Reorder level must be a positive number"),
        Validator.Range(0, 32767, "Units on order must be between 0 and 32767"));

    //pattern matching using RegEx() regular expression
    // lets assume we have a field called Email
    //HTML5 could validate field using type="email"
    //validation controls would use .Regex(expression, yourerrormessage)
    //see email matching expressions https://emailregex.com
    //Validation.Add("Email,
    //                  Validator.Regex(@"^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$", "invalid email")
    //Validator.Add("PostalCode",
    //              Validator.Regex(@"[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z][0-9]", "postal code not vaild");


}


@section banner{
    <h1>CRUD - Insert</h1>
    <blockquote class="alert alert-info">
        This form will  demonstrte the create (insert) of CRUD. It will demonstrate
        using bootstrap text alignment for setting up right aligned text, default
        left aligned web controls and centered aligned buttons. The Input controls
        and their label text controls are in a 2 column format. The submit buttons
        are centered on another row. Tool tips are used on the web controls as are
        placeholder prases. Try/Catch will be used to capture processing errors.
        <br /><br />
        The Products table will be maintained. It has a primary identity key. Thus, no need for a
        field for the primay key is required on this form. This form ONLY does insert. However,
        if you wished to have a field to display the new primary key when it is created,
        you could create a &ltLabel&gt field for the output display of the primary key.
    </blockquote>
}


@if (IsPost)
{
    // i have multiple buttons
    // i will determine which button is pressed and then do that action
    if (thebutton.Equals("clear"))
    {
        //remove the currents values in the input/select fields
        productname = "";
        supplierid = "0";
        categoryid = "0";
        quantityperunit = "";
        unitprice = "";
        unitsinstock = "";
        unitsonorder = "";
        reorderlevel = "";
        discontinued = "";

    }
    else
    {
        //process the entered data
        //retireve the data within the input/select controls
        productname = Request.Form["ProductName"];
        supplierid = Request.Form["SupplierList"];
        categoryid = Request.Form["CategoryList"];
        quantityperunit = Request.Form["QuantityPerUnit"];
        unitprice = Request.Form["UnitPrice"];
        unitsinstock = Request.Form["UnitsInStock"];
        unitsonorder = Request.Form["UnitsOnOrder"];
        reorderlevel = Request.Form["ReorderLevel"];
        discontinued = Request.Form["Discontinued"];
        //test data is correct (validation)
        //execute that the command Validation.IsValid to cause the caildation
        //  Controls to run
        if (Validation.IsValid())
        {


            //good
            //      within error handling <try/catch>
            //      create the insert sql command
            //      execute the command
            //      test success of execution and output an appropriate message

            try
            {
                //You may need to do additional validation that connot be done
                //  using HTML5 validation values or via your validation controls
                //example : Lets assume that the supplier id is a required field
                //      Lets  assume that the validation was not performed by HTML5
                //          or using validation controls
                if (string.IsNullOrEmpty(supplierid) || int.Parse(supplierid) == 0)
                {
                    throw new Exception("Invalid Supplier ID. Please select from the supllied list");
                }

                //on the product table, the forgein keys are nullable
                // if the user has selected the none option, treat the foreign keys as nullable
                //if (int.Parse(supplierid) == -1)
                //{
                //    supplierid = null;
                //}
                //this could also be done directly on the execute statement of your insert (See Below)
                //if (int.Parse(categoryid) == -1)
                //{
                //    categoryid = null;
                //}

                //create the sql insert command
                var insertcommand = @"INSERT INTO Products (ProductName, SupplierID, CategoryID,
QuantityPerUnit, UnitPrice, UnitInStock, UnitOnOrder,
ReorderLevel, Discontinued)
Values(@0,@1,@2,@3,@4,@5,@6,@7,@8)";

                //execute the insert command
                //to execute the insert update or delete command (which are not queries) use .Execute()

                db.Execute(insertcommand, productname,
                    int.Parse(supplierid) == -1 ? null : supplierid,
                    int.Parse(categoryid) == -1 ? null : categoryid,
                    string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                    string.IsNullOrEmpty(unitprice) ? "0.00" : unitprice,
                    string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                    string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                    string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                    0);

                // get the identity value of the last inserted record


                // display a success message
                <p class="col-12 text-center">
                    <span style="color:forestgreen"><strong>New Product Added</strong></span>
                </p>
            }
            catch (Exception ex)
            {
                <p class="col-12 text-center">
                    <span style="color:firebrick"><strong>Error:@ex.Message</strong></span>
                </p>
            }
        }
    }
}
else
{
    // to initializr feilds on your form
    productname = "";
    supplierid = "0";
    categoryid = "0";
    quantityperunit = "";
    unitprice = "";
    unitsinstock = "";
    unitsonorder = "";
    reorderlevel = "";
    discontinued = "";
}
@* using the validationsummary() control, you will automatically see the error meeages of your validation controls *@
@* this cntrol needs to be placed on your webpage After the Validation.IsValid() command *@
@Html.ValidationSummary()
<form id="theForm" method="post">
    <div class="row">
        <div class="col-md-6 text-right">
            <label for="ProductName">Name: </label><br />
            <label for="SupplierList">Supplier: </label><br />
            <label for="CategoryID">Category: </label><br />
            <label for="QuantityPerUnit">Qty/Unit: </label><br />
            <label for="UnitPrice">Price: </label><br />
            <label for="UnitsInStock">QoH: </label><br />
            <label for="UnitsOnOrder">QOO: </label><br />
            <label for="ReorderLevel">RoL: </label><br />
            <label for="Discontinued">Disc.: </label><br /><br />
        </div>
        <div class="col-md-6">
            <input type="text" id="ProductName" name="ProductName"
                   placeholder="enter product name" title="Product Name"
                   value="@productname" /><br />
            @* optionally, you could place your error message right beside
                the control that is in error*@
            <select id="SupplierList" name="SupplierList">
                <option value="0">select supplier ...</option>
                <option value="-1">None</option>
                @* traverse the collection adding one option tag per collection item
                    set up the ddl to retain the selected value*@
                @foreach (var supplierItem in supplierlist)
                {
                    if (supplierid.Equals(supplierItem.SupplierID.ToString()))
                    {
                        <option value="@supplierItem.SupplierID" selected>@supplierItem.CompanyName</option>
                    }
                    else
                    {
                        <option value="@supplierItem.SupplierID" selected>@supplierItem.CompanyName</option>
                    }
                }

            </select><br />
            <select id="CategoryList" name="CategoryList">
                <option value="0">select category ...</option>
                <option value="-1">None</option>
                @foreach (var categoryItem in categorylist)
                {
                    if (supplierid.Equals(categoryItem.CategoryID.ToString()))
                    {
                        <option value="@categoryItem.CategoryID" selected>@categoryItem.CategoryName</option>
                    }
                    else
                    {
                        <option value="@categoryItem.CategoryID" selected>@categoryItem.CategoryName</option>
                    }
                }
            </select><br />
            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit"
                   value="@quantityperunit" /><br />
            @* html5 browser client side validation
                restrict the input to number(type=number)
                this requires a decimal number and the default is an
                integer number: step="0.01"
                also place a min="0.00"
                this field is nullable BUT if it was required
                you could use the keyword: required*@
            <input type="number" id="UnitPrice" name="UnitPrice"
                   value="@unitprice" step="0.01" min="0.00"
                   title="value greater or equal to 0.00" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock"
                   value="@unitsinstock" /><br />
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder"
                   value="@unitsonorder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel"
                   value="@reorderlevel" /><br />
            <input type="checkbox" id="Discontinued" name="Discontinued"
                   @(string.IsNullOrEmpty(discontinued) ? "" : "checked") /> (discontinued if checked)<br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" name="theButton" id="theButton" value="submit"
                    class="btn btn-primary">
                Submit
            </button>&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theButton" value="clear"
                    class="btn btn-light">
                Clear
            </button>
        </div>
    </div>
</form>